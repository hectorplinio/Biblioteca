'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var internal = require('svelte/internal');
var svelte = require('svelte');
var transition = require('svelte/transition');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var svelte__namespace = /*#__PURE__*/_interopNamespace(svelte);

/* src/Modal.svelte generated by Svelte v3.42.4 */

const { window: window_1 } = internal.globals;

function add_css(target) {
	internal.append_styles(target, "svelte-2wx9ab", ".svelte-2wx9ab{box-sizing:border-box}.bg.svelte-2wx9ab{position:fixed;z-index:1000;top:0;left:0;display:flex;flex-direction:column;justify-content:center;width:100vw;height:100vh;background:rgba(0, 0, 0, 0.66)}.window-wrap.svelte-2wx9ab{position:relative;margin:2rem;max-height:100%}.window.svelte-2wx9ab{position:relative;width:40rem;max-width:100%;max-height:100%;margin:2rem auto;color:black;border-radius:0.5rem;background:white}.content.svelte-2wx9ab{position:relative;padding:1rem;max-height:calc(100vh - 4rem);overflow:auto}.close.svelte-2wx9ab{display:block;box-sizing:border-box;position:absolute;z-index:1000;top:1rem;right:1rem;margin:0;padding:0;width:1.5rem;height:1.5rem;border:0;color:black;border-radius:1.5rem;background:white;box-shadow:0 0 0 1px black;transition:transform 0.2s cubic-bezier(0.25, 0.1, 0.25, 1),\n                background 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);-webkit-appearance:none}.close.svelte-2wx9ab:before,.close.svelte-2wx9ab:after{content:'';display:block;box-sizing:border-box;position:absolute;top:50%;width:1rem;height:1px;background:black;transform-origin:center;transition:height 0.2s cubic-bezier(0.25, 0.1, 0.25, 1),\n                background 0.2s cubic-bezier(0.25, 0.1, 0.25, 1)}.close.svelte-2wx9ab:before{-webkit-transform:translate(0, -50%) rotate(45deg);-moz-transform:translate(0, -50%) rotate(45deg);transform:translate(0, -50%) rotate(45deg);left:0.25rem}.close.svelte-2wx9ab:after{-webkit-transform:translate(0, -50%) rotate(-45deg);-moz-transform:translate(0, -50%) rotate(-45deg);transform:translate(0, -50%) rotate(-45deg);left:0.25rem}.close.svelte-2wx9ab:hover{background:black}.close.svelte-2wx9ab:hover:before,.close.svelte-2wx9ab:hover:after{height:2px;background:white}.close.svelte-2wx9ab:focus{border-color:#3399ff;box-shadow:0 0 0 2px #3399ff}.close.svelte-2wx9ab:active{transform:scale(0.9)}.close.svelte-2wx9ab:hover,.close.svelte-2wx9ab:focus,.close.svelte-2wx9ab:active{outline:none}");
}

// (338:0) {#if Component}
function create_if_block(ctx) {
	let div3;
	let div2;
	let div1;
	let t;
	let div0;
	let switch_instance;
	let div1_transition;
	let div3_transition;
	let current;
	let mounted;
	let dispose;
	let if_block = /*state*/ ctx[0].closeButton && create_if_block_1(ctx);
	var switch_value = /*Component*/ ctx[1];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			div3 = internal.element("div");
			div2 = internal.element("div");
			div1 = internal.element("div");
			if (if_block) if_block.c();
			t = internal.space();
			div0 = internal.element("div");
			if (switch_instance) internal.create_component(switch_instance.$$.fragment);
			internal.attr(div0, "class", "content svelte-2wx9ab");
			internal.attr(div0, "style", /*cssContent*/ ctx[8]);
			internal.attr(div1, "class", "window svelte-2wx9ab");
			internal.attr(div1, "role", "dialog");
			internal.attr(div1, "aria-modal", "true");
			internal.attr(div1, "style", /*cssWindow*/ ctx[7]);
			internal.attr(div2, "class", "window-wrap svelte-2wx9ab");
			internal.attr(div2, "style", /*cssWindowWrap*/ ctx[6]);
			internal.attr(div3, "class", "bg svelte-2wx9ab");
			internal.attr(div3, "style", /*cssBg*/ ctx[5]);
		},
		m(target, anchor) {
			internal.insert(target, div3, anchor);
			internal.append(div3, div2);
			internal.append(div2, div1);
			if (if_block) if_block.m(div1, null);
			internal.append(div1, t);
			internal.append(div1, div0);

			if (switch_instance) {
				internal.mount_component(switch_instance, div0, null);
			}

			/*div1_binding*/ ctx[39](div1);
			/*div2_binding*/ ctx[40](div2);
			/*div3_binding*/ ctx[41](div3);
			current = true;

			if (!mounted) {
				dispose = [
					internal.listen(div1, "introstart", function () {
						if (internal.is_function(/*onOpen*/ ctx[12])) /*onOpen*/ ctx[12].apply(this, arguments);
					}),
					internal.listen(div1, "outrostart", function () {
						if (internal.is_function(/*onClose*/ ctx[13])) /*onClose*/ ctx[13].apply(this, arguments);
					}),
					internal.listen(div1, "introend", function () {
						if (internal.is_function(/*onOpened*/ ctx[14])) /*onOpened*/ ctx[14].apply(this, arguments);
					}),
					internal.listen(div1, "outroend", function () {
						if (internal.is_function(/*onClosed*/ ctx[15])) /*onClosed*/ ctx[15].apply(this, arguments);
					}),
					internal.listen(div3, "mousedown", /*handleOuterMousedown*/ ctx[19]),
					internal.listen(div3, "mouseup", /*handleOuterMouseup*/ ctx[20])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*state*/ ctx[0].closeButton) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*state*/ 1) {
						internal.transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					internal.transition_in(if_block, 1);
					if_block.m(div1, t);
				}
			} else if (if_block) {
				internal.group_outros();

				internal.transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				internal.check_outros();
			}

			if (switch_value !== (switch_value = /*Component*/ ctx[1])) {
				if (switch_instance) {
					internal.group_outros();
					const old_component = switch_instance;

					internal.transition_out(old_component.$$.fragment, 1, 0, () => {
						internal.destroy_component(old_component, 1);
					});

					internal.check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					internal.create_component(switch_instance.$$.fragment);
					internal.transition_in(switch_instance.$$.fragment, 1);
					internal.mount_component(switch_instance, div0, null);
				} else {
					switch_instance = null;
				}
			}

			if (!current || dirty[0] & /*cssContent*/ 256) {
				internal.attr(div0, "style", /*cssContent*/ ctx[8]);
			}

			if (!current || dirty[0] & /*cssWindow*/ 128) {
				internal.attr(div1, "style", /*cssWindow*/ ctx[7]);
			}

			if (!current || dirty[0] & /*cssWindowWrap*/ 64) {
				internal.attr(div2, "style", /*cssWindowWrap*/ ctx[6]);
			}

			if (!current || dirty[0] & /*cssBg*/ 32) {
				internal.attr(div3, "style", /*cssBg*/ ctx[5]);
			}
		},
		i(local) {
			if (current) return;
			internal.transition_in(if_block);
			if (switch_instance) internal.transition_in(switch_instance.$$.fragment, local);

			internal.add_render_callback(() => {
				if (!div1_transition) div1_transition = internal.create_bidirectional_transition(div1, /*currentTransitionWindow*/ ctx[11], /*state*/ ctx[0].transitionWindowProps, true);
				div1_transition.run(1);
			});

			internal.add_render_callback(() => {
				if (!div3_transition) div3_transition = internal.create_bidirectional_transition(div3, /*currentTransitionBg*/ ctx[10], /*state*/ ctx[0].transitionBgProps, true);
				div3_transition.run(1);
			});

			current = true;
		},
		o(local) {
			internal.transition_out(if_block);
			if (switch_instance) internal.transition_out(switch_instance.$$.fragment, local);
			if (!div1_transition) div1_transition = internal.create_bidirectional_transition(div1, /*currentTransitionWindow*/ ctx[11], /*state*/ ctx[0].transitionWindowProps, false);
			div1_transition.run(0);
			if (!div3_transition) div3_transition = internal.create_bidirectional_transition(div3, /*currentTransitionBg*/ ctx[10], /*state*/ ctx[0].transitionBgProps, false);
			div3_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) internal.detach(div3);
			if (if_block) if_block.d();
			if (switch_instance) internal.destroy_component(switch_instance);
			/*div1_binding*/ ctx[39](null);
			if (detaching && div1_transition) div1_transition.end();
			/*div2_binding*/ ctx[40](null);
			/*div3_binding*/ ctx[41](null);
			if (detaching && div3_transition) div3_transition.end();
			mounted = false;
			internal.run_all(dispose);
		}
	};
}

// (360:8) {#if state.closeButton}
function create_if_block_1(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty[0] & /*state*/ 1) show_if = !!/*isFunction*/ ctx[16](/*state*/ ctx[0].closeButton);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, [-1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = internal.empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			internal.insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				internal.group_outros();

				internal.transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				internal.check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				internal.transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			internal.transition_in(if_block);
			current = true;
		},
		o(local) {
			internal.transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) internal.detach(if_block_anchor);
		}
	};
}

// (363:10) {:else}
function create_else_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = internal.element("button");
			internal.attr(button, "class", "close svelte-2wx9ab");
			internal.attr(button, "style", /*cssCloseButton*/ ctx[9]);
		},
		m(target, anchor) {
			internal.insert(target, button, anchor);

			if (!mounted) {
				dispose = internal.listen(button, "click", /*close*/ ctx[17]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*cssCloseButton*/ 512) {
				internal.attr(button, "style", /*cssCloseButton*/ ctx[9]);
			}
		},
		i: internal.noop,
		o: internal.noop,
		d(detaching) {
			if (detaching) internal.detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (361:10) {#if isFunction(state.closeButton)}
function create_if_block_2(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*state*/ ctx[0].closeButton;

	function switch_props(ctx) {
		return { props: { onClose: /*close*/ ctx[17] } };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) internal.create_component(switch_instance.$$.fragment);
			switch_instance_anchor = internal.empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				internal.mount_component(switch_instance, target, anchor);
			}

			internal.insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*state*/ ctx[0].closeButton)) {
				if (switch_instance) {
					internal.group_outros();
					const old_component = switch_instance;

					internal.transition_out(old_component.$$.fragment, 1, 0, () => {
						internal.destroy_component(old_component, 1);
					});

					internal.check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					internal.create_component(switch_instance.$$.fragment);
					internal.transition_in(switch_instance.$$.fragment, 1);
					internal.mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) internal.transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) internal.transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) internal.detach(switch_instance_anchor);
			if (switch_instance) internal.destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment(ctx) {
	let t;
	let current;
	let mounted;
	let dispose;
	let if_block = /*Component*/ ctx[1] && create_if_block(ctx);
	const default_slot_template = /*#slots*/ ctx[38].default;
	const default_slot = internal.create_slot(default_slot_template, ctx, /*$$scope*/ ctx[37], null);

	return {
		c() {
			if (if_block) if_block.c();
			t = internal.space();
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			internal.insert(target, t, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;

			if (!mounted) {
				dispose = internal.listen(window_1, "keydown", /*handleKeydown*/ ctx[18]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*Component*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*Component*/ 2) {
						internal.transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					internal.transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				internal.group_outros();

				internal.transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				internal.check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 64)) {
					internal.update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[37],
						!current
						? internal.get_all_dirty_from_scope(/*$$scope*/ ctx[37])
						: internal.get_slot_changes(default_slot_template, /*$$scope*/ ctx[37], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			internal.transition_in(if_block);
			internal.transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			internal.transition_out(if_block);
			internal.transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) internal.detach(t);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function bind(Component, props = {}) {
	return function ModalComponent(options) {
		return new Component({
				...options,
				props: { ...props, ...options.props }
			});
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	const dispatch = svelte.createEventDispatcher();
	const baseSetContext = svelte__namespace.setContext;
	let { show = null } = $$props;
	let { key = 'simple-modal' } = $$props;
	let { closeButton = true } = $$props;
	let { closeOnEsc = true } = $$props;
	let { closeOnOuterClick = true } = $$props;
	let { styleBg = {} } = $$props;
	let { styleWindowWrap = {} } = $$props;
	let { styleWindow = {} } = $$props;
	let { styleContent = {} } = $$props;
	let { styleCloseButton = {} } = $$props;
	let { setContext = baseSetContext } = $$props;
	let { transitionBg = transition.fade } = $$props;
	let { transitionBgProps = { duration: 250 } } = $$props;
	let { transitionWindow = transitionBg } = $$props;
	let { transitionWindowProps = transitionBgProps } = $$props;

	const defaultState = {
		closeButton,
		closeOnEsc,
		closeOnOuterClick,
		styleBg,
		styleWindowWrap,
		styleWindow,
		styleContent,
		styleCloseButton,
		transitionBg,
		transitionBgProps,
		transitionWindow,
		transitionWindowProps
	};

	let state = { ...defaultState };
	let Component = null;
	let background;
	let wrap;
	let modalWindow;
	let scrollY;
	let cssBg;
	let cssWindowWrap;
	let cssWindow;
	let cssContent;
	let cssCloseButton;
	let currentTransitionBg;
	let currentTransitionWindow;
	let prevBodyPosition;
	let prevBodyOverflow;
	let prevBodyWidth;
	let outerClickTarget;
	const camelCaseToDash = str => str.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();

	const toCssString = props => props
	? Object.keys(props).reduce((str, key) => `${str}; ${camelCaseToDash(key)}: ${props[key]}`, '')
	: '';

	const isFunction = f => !!(f && f.constructor && f.call && f.apply);

	const updateStyleTransition = () => {
		$$invalidate(5, cssBg = toCssString(Object.assign(
			{},
			{
				width: window.innerWidth,
				height: window.innerHeight
			},
			state.styleBg
		)));

		$$invalidate(6, cssWindowWrap = toCssString(state.styleWindowWrap));
		$$invalidate(7, cssWindow = toCssString(state.styleWindow));
		$$invalidate(8, cssContent = toCssString(state.styleContent));
		$$invalidate(9, cssCloseButton = toCssString(state.styleCloseButton));
		$$invalidate(10, currentTransitionBg = state.transitionBg);
		$$invalidate(11, currentTransitionWindow = state.transitionWindow);
	};

	const toVoid = () => {
		
	};

	let onOpen = toVoid;
	let onClose = toVoid;
	let onOpened = toVoid;
	let onClosed = toVoid;

	const open = (NewComponent, newProps = {}, options = {}, callback = {}) => {
		$$invalidate(1, Component = bind(NewComponent, newProps));
		$$invalidate(0, state = { ...defaultState, ...options });
		updateStyleTransition();
		disableScroll();

		($$invalidate(12, onOpen = event => {
			if (callback.onOpen) callback.onOpen(event);
			dispatch('open');
			dispatch('opening'); // Deprecated. Do not use!
		}), $$invalidate(13, onClose = event => {
			if (callback.onClose) callback.onClose(event);
			dispatch('close');
			dispatch('closing'); // Deprecated. Do not use!
		}), $$invalidate(14, onOpened = event => {
			if (callback.onOpened) callback.onOpened(event);
			dispatch('opened');
		}));

		$$invalidate(15, onClosed = event => {
			if (callback.onClosed) callback.onClosed(event);
			dispatch('closed');
		});
	};

	const close = (callback = {}) => {
		$$invalidate(13, onClose = callback.onClose || onClose);
		$$invalidate(15, onClosed = callback.onClosed || onClosed);
		$$invalidate(1, Component = null);
		enableScroll();
	};

	const handleKeydown = event => {
		if (state.closeOnEsc && Component && event.key === 'Escape') {
			event.preventDefault();
			close();
		}

		if (Component && event.key === 'Tab') {
			// trap focus
			const nodes = modalWindow.querySelectorAll('*');

			const tabbable = Array.from(nodes).filter(node => node.tabIndex >= 0);
			let index = tabbable.indexOf(document.activeElement);
			if (index === -1 && event.shiftKey) index = 0;
			index += tabbable.length + (event.shiftKey ? -1 : 1);
			index %= tabbable.length;
			tabbable[index].focus();
			event.preventDefault();
		}
	};

	const handleOuterMousedown = event => {
		if (state.closeOnOuterClick && (event.target === background || event.target === wrap)) outerClickTarget = event.target;
	};

	const handleOuterMouseup = event => {
		if (state.closeOnOuterClick && event.target === outerClickTarget) {
			event.preventDefault();
			close();
		}
	};

	const disableScroll = () => {
		scrollY = window.scrollY;
		prevBodyPosition = document.body.style.position;
		prevBodyOverflow = document.body.style.overflow;
		prevBodyWidth = document.body.style.width;
		document.body.style.position = 'fixed';
		document.body.style.top = `-${scrollY}px`;
		document.body.style.overflow = 'hidden';
		document.body.style.width = '100%';
	};

	const enableScroll = () => {
		document.body.style.position = prevBodyPosition || '';
		document.body.style.top = '';
		document.body.style.overflow = prevBodyOverflow || '';
		document.body.style.width = prevBodyWidth || '';
		window.scrollTo(0, scrollY);
	};

	setContext(key, { open, close });
	let isMounted = false;

	svelte__namespace.onDestroy(() => {
		if (isMounted) close();
	});

	svelte__namespace.onMount(() => {
		$$invalidate(36, isMounted = true);
	});

	function div1_binding($$value) {
		internal.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			modalWindow = $$value;
			$$invalidate(4, modalWindow);
		});
	}

	function div2_binding($$value) {
		internal.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			wrap = $$value;
			$$invalidate(3, wrap);
		});
	}

	function div3_binding($$value) {
		internal.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			background = $$value;
			$$invalidate(2, background);
		});
	}

	$$self.$$set = $$props => {
		if ('show' in $$props) $$invalidate(21, show = $$props.show);
		if ('key' in $$props) $$invalidate(22, key = $$props.key);
		if ('closeButton' in $$props) $$invalidate(23, closeButton = $$props.closeButton);
		if ('closeOnEsc' in $$props) $$invalidate(24, closeOnEsc = $$props.closeOnEsc);
		if ('closeOnOuterClick' in $$props) $$invalidate(25, closeOnOuterClick = $$props.closeOnOuterClick);
		if ('styleBg' in $$props) $$invalidate(26, styleBg = $$props.styleBg);
		if ('styleWindowWrap' in $$props) $$invalidate(27, styleWindowWrap = $$props.styleWindowWrap);
		if ('styleWindow' in $$props) $$invalidate(28, styleWindow = $$props.styleWindow);
		if ('styleContent' in $$props) $$invalidate(29, styleContent = $$props.styleContent);
		if ('styleCloseButton' in $$props) $$invalidate(30, styleCloseButton = $$props.styleCloseButton);
		if ('setContext' in $$props) $$invalidate(31, setContext = $$props.setContext);
		if ('transitionBg' in $$props) $$invalidate(32, transitionBg = $$props.transitionBg);
		if ('transitionBgProps' in $$props) $$invalidate(33, transitionBgProps = $$props.transitionBgProps);
		if ('transitionWindow' in $$props) $$invalidate(34, transitionWindow = $$props.transitionWindow);
		if ('transitionWindowProps' in $$props) $$invalidate(35, transitionWindowProps = $$props.transitionWindowProps);
		if ('$$scope' in $$props) $$invalidate(37, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*show*/ 2097152 | $$self.$$.dirty[1] & /*isMounted*/ 32) {
			{
				if (isMounted) {
					if (isFunction(show)) {
						open(show);
					} else {
						close();
					}
				}
			}
		}
	};

	return [
		state,
		Component,
		background,
		wrap,
		modalWindow,
		cssBg,
		cssWindowWrap,
		cssWindow,
		cssContent,
		cssCloseButton,
		currentTransitionBg,
		currentTransitionWindow,
		onOpen,
		onClose,
		onOpened,
		onClosed,
		isFunction,
		close,
		handleKeydown,
		handleOuterMousedown,
		handleOuterMouseup,
		show,
		key,
		closeButton,
		closeOnEsc,
		closeOnOuterClick,
		styleBg,
		styleWindowWrap,
		styleWindow,
		styleContent,
		styleCloseButton,
		setContext,
		transitionBg,
		transitionBgProps,
		transitionWindow,
		transitionWindowProps,
		isMounted,
		$$scope,
		slots,
		div1_binding,
		div2_binding,
		div3_binding
	];
}

class Modal extends internal.SvelteComponent {
	constructor(options) {
		super();

		internal.init(
			this,
			options,
			instance,
			create_fragment,
			internal.safe_not_equal,
			{
				show: 21,
				key: 22,
				closeButton: 23,
				closeOnEsc: 24,
				closeOnOuterClick: 25,
				styleBg: 26,
				styleWindowWrap: 27,
				styleWindow: 28,
				styleContent: 29,
				styleCloseButton: 30,
				setContext: 31,
				transitionBg: 32,
				transitionBgProps: 33,
				transitionWindow: 34,
				transitionWindowProps: 35
			},
			add_css,
			[-1, -1]
		);
	}
}

exports.bind = bind;
exports['default'] = Modal;
